{"ast":null,"code":"var _jsxFileName = \"/Users/admin/Desktop/mern-text-form/client/src/components/recordList.js\";\nimport React, { Component } from \"react\"; // This will require to npm install axios\n\nimport axios from 'axios'; //import { Link } from \"react-router-dom\";\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Record = props => /*#__PURE__*/_jsxDEV(\"tr\", {\n  children: [/*#__PURE__*/_jsxDEV(\"td\", {\n    children: props.record.article_title\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 8,\n    columnNumber: 5\n  }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n    children: props.record.article_description\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 9,\n    columnNumber: 5\n  }, this), /*#__PURE__*/_jsxDEV(\"td\", {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 10,\n    columnNumber: 5\n  }, this)]\n}, void 0, true, {\n  fileName: _jsxFileName,\n  lineNumber: 7,\n  columnNumber: 3\n}, this);\n\n_c = Record;\nexport default class RecordList extends Component {\n  // This is the constructor that shall store our data retrieved from the database\n  constructor(props) {\n    super(props); //this.deleteRecord = this.deleteRecord.bind(this);\n\n    this.state = {\n      records: []\n    };\n  } // This method will get the data from the database.\n\n\n  componentDidMount() {\n    axios.get(\"${this.API_URL}/record/\").then(response => {\n      this.setState({\n        records: response.data\n      });\n    }).catch(function (error) {\n      console.log(error);\n    });\n  }\n\n  async getRecords() {\n    let url = `${this.API_URL}/records`; // URL of the API.\n\n    let result = await fetch(url); // Get the data\n\n    let json = await result.json(); // Turn it into json\n\n    return this.setState({\n      // Set it in the state\n      records: json\n    });\n  } // This method will map out the users on the table\n\n\n  recordList() {\n    return this.state.records.map(currentrecord => {\n      return /*#__PURE__*/_jsxDEV(Record, {\n        record: currentrecord\n      }, currentrecord._id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 9\n      }, this);\n    });\n  } // This following section will display the table with the records of individuals.\n\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        paddingBottom: \"50px\"\n      },\n      className: \"container\",\n      children: /*#__PURE__*/_jsxDEV(\"table\", {\n        className: \"table table-striped\",\n        style: {\n          marginTop: 20\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n          children: /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: [/*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Title\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 65,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Description\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 66,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 64,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n          children: this.recordList()\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 69,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nvar _c;\n\n$RefreshReg$(_c, \"Record\");","map":{"version":3,"sources":["/Users/admin/Desktop/mern-text-form/client/src/components/recordList.js"],"names":["React","Component","axios","Record","props","record","article_title","article_description","RecordList","constructor","state","records","componentDidMount","get","then","response","setState","data","catch","error","console","log","getRecords","url","API_URL","result","fetch","json","recordList","map","currentrecord","_id","render","paddingBottom","marginTop"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC,C,CACA;;AACA,OAAOC,KAAP,MAAkB,OAAlB,C,CACA;;;;AAEA,MAAMC,MAAM,GAAIC,KAAD,iBACb;AAAA,0BACE;AAAA,cAAKA,KAAK,CAACC,MAAN,CAAaC;AAAlB;AAAA;AAAA;AAAA;AAAA,UADF,eAEE;AAAA,cAAKF,KAAK,CAACC,MAAN,CAAaE;AAAlB;AAAA;AAAA;AAAA;AAAA,UAFF,eAGE;AAAA;AAAA;AAAA;AAAA,UAHF;AAAA;AAAA;AAAA;AAAA;AAAA,QADF;;KAAMJ,M;AAUN,eAAe,MAAMK,UAAN,SAAyBP,SAAzB,CAAmC;AAChD;AACAQ,EAAAA,WAAW,CAACL,KAAD,EAAQ;AACjB,UAAMA,KAAN,EADiB,CAEjB;;AACA,SAAKM,KAAL,GAAa;AAAEC,MAAAA,OAAO,EAAE;AAAX,KAAb;AACD,GAN+C,CAQhD;;;AACAC,EAAAA,iBAAiB,GAAG;AAClBV,IAAAA,KAAK,CACFW,GADH,CACO,yBADP,EAEGC,IAFH,CAESC,QAAD,IAAc;AAClB,WAAKC,QAAL,CAAc;AAAEL,QAAAA,OAAO,EAAEI,QAAQ,CAACE;AAApB,OAAd;AACD,KAJH,EAKGC,KALH,CAKS,UAAUC,KAAV,EAAiB;AACtBC,MAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACD,KAPH;AAQD;;AACe,QAAVG,UAAU,GAAG;AACjB,QAAIC,GAAG,GAAI,GAAE,KAAKC,OAAQ,UAA1B,CADiB,CACoB;;AACrC,QAAIC,MAAM,GAAG,MAAMC,KAAK,CAACH,GAAD,CAAxB,CAFiB,CAEc;;AAC/B,QAAII,IAAI,GAAG,MAAMF,MAAM,CAACE,IAAP,EAAjB,CAHiB,CAGe;;AAChC,WAAO,KAAKX,QAAL,CAAc;AAAE;AACnBL,MAAAA,OAAO,EAAEgB;AADQ,KAAd,CAAP;AAIH,GA3BiD,CA8BhD;;;AACAC,EAAAA,UAAU,GAAG;AACX,WAAO,KAAKlB,KAAL,CAAWC,OAAX,CAAmBkB,GAAnB,CAAwBC,aAAD,IAAmB;AAC/C,0BACE,QAAC,MAAD;AACE,QAAA,MAAM,EAAEA;AADV,SAEOA,aAAa,CAACC,GAFrB;AAAA;AAAA;AAAA;AAAA,cADF;AAMD,KAPM,CAAP;AAQD,GAxC+C,CA0ChD;;;AACAC,EAAAA,MAAM,GAAG;AACP,wBACE;AAAK,MAAA,KAAK,EAAE;AAACC,QAAAA,aAAa,EAAC;AAAf,OAAZ;AAAoC,MAAA,SAAS,EAAC,WAA9C;AAAA,6BACE;AAAO,QAAA,SAAS,EAAC,qBAAjB;AAAuC,QAAA,KAAK,EAAE;AAAEC,UAAAA,SAAS,EAAE;AAAb,SAA9C;AAAA,gCACE;AAAA,iCACE;AAAA,oCACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBADF,eAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAFF;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,gBADF,eAOE;AAAA,oBAAQ,KAAKN,UAAL;AAAR;AAAA;AAAA;AAAA;AAAA,gBAPF;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YADF;AAaD;;AAzD+C","sourcesContent":["import React, { Component } from \"react\";\n// This will require to npm install axios\nimport axios from 'axios';\n//import { Link } from \"react-router-dom\";\n \nconst Record = (props) => (\n  <tr>\n    <td>{props.record.article_title}</td>\n    <td>{props.record.article_description}</td>\n    <td>\n    \n    </td>\n  </tr>\n);\n \nexport default class RecordList extends Component {\n  // This is the constructor that shall store our data retrieved from the database\n  constructor(props) {\n    super(props);\n    //this.deleteRecord = this.deleteRecord.bind(this);\n    this.state = { records: [] };\n  }\n \n  // This method will get the data from the database.\n  componentDidMount() {\n    axios\n      .get(\"${this.API_URL}/record/\")\n      .then((response) => {\n        this.setState({ records: response.data });\n      })\n      .catch(function (error) {\n        console.log(error);\n      });\n  }\n  async getRecords() {\n    let url = `${this.API_URL}/records`; // URL of the API.\n    let result = await fetch(url); // Get the data\n    let json = await result.json(); // Turn it into json\n    return this.setState({ // Set it in the state\n        records: json\n    })\n\n}\n \n \n  // This method will map out the users on the table\n  recordList() {\n    return this.state.records.map((currentrecord) => {\n      return (\n        <Record\n          record={currentrecord}\n          key={currentrecord._id}\n        />\n      );\n    });\n  }\n \n  // This following section will display the table with the records of individuals.\n  render() {\n    return (\n      <div style={{paddingBottom:\"50px\"}} className=\"container\">\n        <table className=\"table table-striped\" style={{ marginTop: 20 }}>\n          <thead>\n            <tr>\n              <th>Title</th>\n              <th>Description</th>\n            </tr>\n          </thead>\n          <tbody>{this.recordList()}</tbody>\n        </table>\n      </div>\n    );\n  }\n}"]},"metadata":{},"sourceType":"module"}